void dfs_surrounded_regions(int r, int c, int n, int m, vector<vector<char>> &board)
{
    if (board[r][c] != 'O')
        return;

    board[r][c] = '#';
    if (r - 1 >= 0)
        dfs_surrounded_regions(r - 1, c, n, m, board);
    if (r + 1 < n)
        dfs_surrounded_regions(r + 1, c, n, m, board);
    if (c - 1 >= 0)
        dfs_surrounded_regions(r, c - 1, n, m, board);
    if (c + 1 < m)
        dfs_surrounded_regions(r, c + 1, n, m, board);
}

void surrounded_regions(vector<vector<char>> &board)
{
    if (board.size() == 0)
        return;

    int n = board.size();
    int m = board[0].size();

    for (int i = 0; i < n; i++)
    {
        if (board[i][0] == 'O')
            dfs_surrounded_regions(i, 0, n, m, board);
        if (board[i][m - 1] == 'O')
            dfs_surrounded_regions(i, m - 1, n, m, board);
    }

    for (int i = 0; i < m; i++)
    {
        if (board[0][i] == 'O')
            dfs_surrounded_regions(0, i, n, m, board);
        if (board[n - 1][i] == 'O')
            dfs_surrounded_regions(n - 1, i, n, m, board);
    }

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (board[i][j] == 'O')
                board[i][j] = 'X';
            else if (board[i][j] == '#')
                board[i][j] = 'O';
        }
    }
}

void BFS(int src, vector<bool> &vis)
{
    queue<int> que;
    que.push(src);
    int level = 0;

    while (que.size() != 0)
    {
        int size = que.size();
        while (size-- > 0)
        {
            int rvtx = que.front();
            que.pop();

            if (rvtx == 6)
            {
                cout << "destination at level: " << level << endl;
            }

            if (vis[rvtx])
            {
                cout << "Cycle wrt " + to_string(src) + " : " + to_string(rvtx) << endl;
                continue;
            }

            vis[rvtx] = true;
            for (Edge *e : graph[rvtx])
            {
                if (!vis[e->v])
                    que.push(e->v);
            }
        }
        level++;
    }
}
